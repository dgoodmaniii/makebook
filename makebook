#!/bin/bash
# +AMDG  This document was begun just before Christmas,
# 2010, and it is humbly dedicated to St. Wulfric, patron of
# bookbinders, and to the Immaculate Heart of Mary for their
# prayers, and to the Sacred Heart of Jesus for His mercy.
#
#**********************************************************#
#                       makebook                           #
#  	     written by Donald P. Goodman III	 	   #
#		   Copyright (C) 2011			   #
#							   #
#	       Impose pdf pages for binding		   #
#**********************************************************#
#
# This program is free software:  you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
#
# For a full copy of the GNU General Public License, see
# <http://www.gnu.org/licenses/>.
#
#**********************************************************#
#                     begin the code                       #
#**********************************************************#
# make script more portable and secure
PATH=/bin:/usr/bin:/usr/local/bin ; export PATH
umask 033
# define our revision number variable for rcs
REVISION="1.0"
# define error codes
E_WRONG_ARGS=64		# too many or few args
E_BAD_SIG_TYPE=65	# invalid type of signature
E_BAD_UNIT=66		# unrecognized dimension unit used
E_BAD_FILENAME=67	# filename contains insecure chars,
			# or doesn't exist
E_BAD_OPT=68		# bad command-line flag requested
# define usage variables
VERBOSE=0		# 0 if not verbose, 1 if -v
SIG_TYPE="folio"	# type of section desired
PAGES_PER_SIG=4	# number of pages per signature
SECT_TYPE=1		# number of signatures per section
NUP="2x1"		# default format of signatures
FRONT_FAVOR=0		# favor front for blanks; off by default
# define various variables to be zero by default
TGT_PAGE_WIDTH=0
TGT_PAGE_HEIGHT=0
HORIZ_DELTA=0
VERT_DELTA=0
HORIZ_OFFSET=0
VERT_OFFSET=0
SCALE=1

# print the version information and exit successfully
function versionfunc
{
	echo "makebook v${REVISION}.  Copyright (C) 2011, Donald P."
	echo "Goodman III."
	echo "This program comes with ABSOLUTELY NO WARRANTY."
	echo "This is free software, and you are welcome to "
	echo "redistribute it under certain conditions; see "
	echo "the GNU GPL v3 for details."
	exit 0
}

# print the online help and exit successfully
function helpfunc
{
cat <<End-of-help
makebook v${REVISION}.  Copyright (C) 2011, Donald P. Goodman III.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to 
redistribute it under certain conditions; see 
the GNU GPL v3 for details.

SUMMARY

makebook:  impose multiple pdf pages onto single sheets 
for printing.

makebook utilizes the power of pdflatex (with its pdfpages
package), as well as pdfinfo and pdftk, to impose several 
pages of a pdf document onto a single sheet in a new pdf
document.  It will do this with many options to exactly
customize the output.  makebook is non-destructive; that is,
it leaves the input file in its initial state and instead
produces a new file properly imposed.

DEFINITIONS

page:  a single side of a single leaf.  In a normal pdf
	document, each page counts as a single page; it probably
	also has a _folio_, or explicit page number, printed on it,
	though not necessarily.
recto:  a page printed on the front side of a leaf.
	Traditionally given an odd-numbered folio.
verso:  a page printed on the back side of a leaf.
	Traditionally given an even-numbered folio.
leaf:  what we commonly call the "page" of a book, which
	contains two pages.  Different signature types yield
	different numbers of leaves; e.g., a folio produces two
	leaves with four pages, while a quarto produces four leaves
	with eight pages.
signature:  loosely used by makebook to mean a single sheet
	of paper, folded up to produce a given number of leaves
	and pages.  Traditionally a signature was actually simply
	the mark put on a sheet to tell the binder in what order
	the sheets, once folded, should be bound, usually just an
	uppercase Roman letter or some similar mark; however, I've 
	chosen to use "signature" to mean a single sheet, which
	may be equivalent to "section" (see below) or may not be.
	Sections may contain multiple signatures, but a signature
	is always unitary.  Signatures can be of many different
	types, traditionally named by the number of leaves they
	produce.  E.g., a folio signature produces two leaves; a
	quarto produces four; an octavo eight; and so on.
section:  a self-contained part of a book, properly folded
	and ready for binding.  Sections may consist of one or
	more signatures, and a book may be made up of one or more
	sections.

EXPLICIT DIMENSIONS

makebook assumes that all dimensions are in "big points"
(bp); that is, Postscript points, of which there are 72 in
an inch.  This is easiest because pdf uses Postscript points
internally, and pdfinfo consequently gives Postscript points
as dimensions when they are requested.  Any dimensions given
without units will therefore be assumed to be big points.

makebook will also accept other units, however:
		inches		in
		centimeters	cm
		points		pt
		picas		pc
		big points	bp
Please note that "pt" is the traditional printers' point,
not the Postscript "big point"; traditional printers' points
are slightly smaller than big points, there being 72.27 of
them per inch.  Picas here is twelve (12) printers' points,
not twelve big points.

To input these other units, simply attach their
abbreviations directly to their numbers; e.g., "8.5in".
makebook will recognize such measurements and convert them
into bp for use internally.

DEFAULT DIMENSIONS

makebook, as will be seen below, permits the explicit
statement of some dimensions.  Absent such statement,
however, default values will be assigned.  Furthermore, the
size of the input page cannot be set explicitly; it is
always determined automatically by the script.  This section
explains a bit how these dimensions are determined.

THE SOURCE PAGE:  The dimensions of the source page are
determined very simply, by running "pdfinfo" through an awk
filter and taking that at face value.  This has worked well
for the author's purposes.  These dimensions cannot be set
explicitly.

THE TARGET PAGE:  The dimensions of the target page can be
specified explicitly at the command line, with "-H" and
"-w".  If they are not, however, makebook does its best to
give them sensible values.  However, I did not want makebook
to assume a given paper size (and thus begin a letterpaper
vs. A4 firestorm) or to assume a desired scaling (and thus
have a default which probably ruins page quality), so it
does so very simply.

makebook simply multiplies the source page dimensions by
appropriate values to ensure that the target page will be
exactly the correct size to hold the requested type of
signature assuming no scaling of the source page.

In other words, if a pdf source document is on halfletter
paper (that is, 8.5in x 5.5in), and folio signatures are
requested, the resulting document will be 8.5in x 11in
(normal letter paper).  If a pdf is on letter paper, and
folio signatures are requested, the resulting document will
be 11in x 17in (normal ledger paper).  If a document is set
on 5.5in x 4.25in paper (a quarter of a normal letter page),
and quarto signatures are requested, the resulting document
will be 8.5in x 11in (normal letter paper).  The same
applies, of course, to metric paper sizes, and even to
abnormal page sizes.  makebook was largely tested, for
example, using a source document set on 4.25in x 6in paper,
and by default produced an 8.5in x 12in signature sheet.
(Better results were obtained by explicitly requesting 8.5in
x 14in paper, or normal legal paper, with a vertical delta,
or -D, of 1in.)

By default, both deltas (-d and -D) and offsets (-m and -M)
are set at zero.

By default, scaling is also set at 0.

FILLING UP SECTIONS

Sometimes, the number of pages in the source document
doesn't match up with the number of pages necessary to set
all the pages into sections each containing an equal number
of pages.  However, it is necessary (at least in traditional
binding) to have sections of equal numbers of leaves.  A
book so arranged is called "perfect"; a book not so arranged
is called "imperfect."

To accomplish this, blank pages are added to the front and
back of the book when necessary.  (That is, to the first and
last sections.)  As far as possible, equal numbers of blank
pages are added both to the front and back of the book; if
uneven numbers of blank pages are required, one additional
blank page is added to the back.  If, however, that would
result in an uneven number of blanks in the front, one
additional blank page is added to the back and one fewer to
the front.  This ensures that odd-numbered folios will
always correctly appear on recto pages.

There is at present no method to specify how many blank
pages one would like at the front and how many at the back,
because it's not clear to me why anyone would want to.  If I
get requests to add this, it would not be difficult to do
so.

One can, however, force makebook to favor the front rather
than the back when unequal numbers of blanks are required to
make the book perfect.  This is specified with the "-f"
option.  With this option specified, makebook follows
precisely the same procedure in determining the number of
blanks; when it's done, however, it simply switches the
number which goes in the front with that which goes in the
back.  Note that this sometimes results in the same number
of blanks at the front and the back both with and without
the "-f" flag set; for example, if the number of blanks is
"2" at the front and "3" at the back.  As the program is
currently written, there is no way to avoid this; see the
above paragraph if this bothers you.

There is at present no method to deliberately make the book
imperfect; e.g., by rounding off a book full of quarto
sections with a folio section on smaller paper.  I can think
of no reason to do this on purpose; the amount of saved
paper is negligible, and the added inconvenience great.

OPTIONS

-V:	Prints license and version information, then exits
	successfully.
-h:	Prints this help information, then exist successfully.
-v:	Verbose output; causes makebook to print lots of
	information about how it's proceeding.  Recommended for
	most uses, since makebook often runs for a while;
	without that feedback it becomes tempting to suspect it of
	hanging when in fact it's proceeding correctly.
-f:	Tells makebook to favor the front rather than the
	back for extra blank pages, if an uneven number of such
	pages will be required to make the book "perfect".
-t:	Selects the type of signature desired.  makebook supports
	the following signature options:
		2o	folio
		4to	quarto
		6to	sexto
		8vo	octavo
		12mo	duodecimo
	Note that "sexto" and "duodecimo" are not self-contained;
	they require cutting to be folded correctly.  The others
	can simply be folded into sections.
-n:	Selects the number of signatures per section desired.
	Normally this will only be used for folio signatures,
	because a single fold is often too thin to sew while binding
	without tearing.  However, makebook supports multiple
	signatures per section for the other signature types, as
	well.
-H:	Explicitly states the height of the target page; that
	is, tells makebook what height the output sheet should be.
-w:	Explicitly states the width of the target page; that is,
	tells makebook what width the output sheet should be.
-d:	The horizontal delta.  Normally makebook simply imposes
	the original pages onto the target sheet with no additional
	separation; delta indicates the separation that should be
	placed between the two.  Useful for adding the "binding
	correction" to sheet, as well as for simply making the pages
	fit as desired.
-D:	The vertical delta.  Same as -d, but applies to the
	vertical separation between pages on the target sheet.
-m:	The horizontal movement, or offset, desired.  makebook
	(via pdfpages) makes the top left corner of the target
	page its origin; positive values of this move all imposed
	pages to the right of that by the specified amount, and
	negative values to the left.  Rarely useful.
-M:	The vertical movement, or offset.  Same as -m, but
	positive values move the imposed pages down, while negative
	values move it up.
-s:	Scale.  The pages will be scaled by this amount when
	they are imposed.  "1" is normal scale, as well as the
	default value; the pages will not be scaled at all, up or
	down.  Values below 1 will scale down (e.g., "0.5" will
	scale the pages down by half) while values above it will
	scale up (e.g., "2" will scale the pages up, making
	double-sized pages).
-i:	Input file.  This argument specifies which file
	makebook will impose.  If no input file is
	specified, makebook will simply use standard input.  Useful
	for piping other programs into makebook.

	If you input from stdin, your output file will be
	called "sigs_book.pdf", unless you specify otherwise.
-o:	Output file.  This optional argument specifies the file
	name of the resulting file; that is, the one with the pages
	imposed onto signatures.  By default, it is "sigs_" prefixed
	onto the input filename.  WARNING:  makebook assumes
	that you're paying attention and doesn't check for
	the existence of the output file; as a result, if your
	specified output file has the same name as an already
	existing file in your directory, it will clobber that
	already existing file.  This behavior is NOT a bug; it
	allows you to run makebook repeatedly and simply reload the
	resulting file to see if you've got the settings correct.
	But it does require you to ensure that you're not clobbering
	a file you want to keep.

	If you want to output to standard output, use
	"stdout" as your output filename; e.g., "-o stdout".
	Using this option turns off the "-v" option, however,
	because otherwise the verbose output will mess up 
	the outputted pdf.

	Normally, of course, standard output is the default;
	but normally with makebook one will want the output in a
	file, so standard output must be explicitly requested.

EXAMPLES

The following are a couple of decent examples of makebook
usage for desktop publishing.  Unless otherwise noted,
"file.pdf" is the file being imposed, and output file names
will not be specified.

At its simplest, makebook can be called without any
arguments at all.  The script will, in this case, take its
input from standard input and output a file called
"sigs_book.pdf".  If you're doing this, you're probably
using makebook as part of a larger toolchain; you may want
makebook to send its output off an stdout just as it
received it from stdin, in which case you need to run it
with an option:

makebook -o stdout

If you're doing that, you probably want to pipe the output
to something else.  You could also redirect it to a file;
e.g., "makebook -o stdout > output.pdf".  However, since the
same could be accomplished with "makebook -o output.pdf",
the "-o stdout" option is really only useful when sending
makebook's output to another program for further processing.

For imposing more or less standard-sized LaTeX-produced pdf
pages onto 8.5in x 11in paper in folio, the following should
prove to be mostly serviceable:

makebook -i file.pdf -H 8.5in -w 11in -t 2o -v -d "-1.1in" -s 0.8333 -n 2

This results in pages that are only minimally scaled
(scaling always reduces quality, so keeping it to a minimum
is desirable) while still leaving sufficient space for the
binding.  Some tweaking may be necessary, particularly if
your printer has trouble getting close to the edges of the
paper.  Such tweaking can be done by scaling the page down a
little more (perhaps 0.8), or by increasing the negative
"delta" (try -2in).

To impose a document originally designed for A4 paper into
folio signatures on A4, try the following:

makebook -v -i file.pdf -n 2 -t 2o -w 29.7cm -H 21cm -s 0.8

This also minimizes scaling, and shows the proper dimensions
to enter for A4 paper.

It's always easier to impose documents which were designed
for imposition on a given size sheet.  E.g., the above
example can be much simplified if one is imposing a document
originally designed for A5 paper into folios on A4:

makebook -v -i file.pdf -n2 -t 2o

There is no need for scaling (which always decreases
quality), and unless told otherwise makebook will select
target paper exactly equal to the source document's size
multiplied in the appropriate dimensions to be precisely
large enough for the desired type of signature.  In other
words, handed an A5 document and asked for folio signatures,
makebook will automatically produce those signatures on A4
paper.  Similarly, of course, when imposing half-letter
documents onto letter paper, or letter documents onto ledger
paper (which is 17in x 11in).

It is often desirable to set a document which one plans to
impose on a given size paper such that a larger size paper
will be appropriate.  The author, for example, had good luck
imposing a 6in x 4.25in document into quarto signatures on
legal size paper (8.5in x 14in) with the following:

makebook -v -i file.pdf -H 14in -w 8.5in -D 1in -t 4to

Initially, I had intended to set the book for quarto
signatures on letter paper, but the fit was too tight; using
legal paper instead allowed me to increase the page height
from 5.5in to 6in and still have plenty of room for trimming
and binding.

It is often helpful, when determining appropriate settings,
to cut out a few signatures' worth of pages from the true
document and to run the tests on that.  makebook takes some
time to run, and using fewer signatures can save a great
deal of time.

Happy binding.
End-of-help
	exit 0;
}

# define a function for dealing with units; convert to bp
function unitarg
{
	if [ ! `echo "$1" | grep '^[\+\|-]*[0-9\.][0-9\.]*\(in\|cm\|pt\|bp\|pc\|$\)'` ]
	then
		echo "ERROR:  dimension \"$1\" not valid." >&2
		exit $E_BAD_UNIT
	fi	
	if [ `expr match "$1" '.*\(in\)'` ]
	then
		OPTARG=`echo "scale=0; ${1%in} * 72" | bc`
		OPTARG=${OPTARG%.*}
	elif [ `expr match "$1" '.*\(cm\)'` ]
	then
		OPTARG=`echo "scale=0; ${1%cm} * 28.3464567" | bc`
		OPTARG=${OPTARG%.*}
	elif [ `expr match "$1" '.*\(pt\)'` ]
	then
		OPTARG=`echo "scale=0; ${1%pt} / 1.00375" | bc`
		OPTARG=${OPTARG%.*}
	elif [ `expr match "$1" '.*\(pc\)'` ]
	then
		OPTARG=`echo "scale=0; (${1%pc} / 1.00375) * 12" | bc`
		OPTARG=${OPTARG%.*}
	elif [ `expr match "$1" '.*\(bp\)'` ]
	then
		OPTARG=${1%bp}
	else
		OPTARG=${1%.*}
	fi
}
# define a function for dealing with section types; convert
# to words; e.g., "4to" to "quarto"
function typearg
{
	if [ "$1" = "4to" ] || [ "$1" = "quarto" ]
	then
		PAGES_PER_SIG=8
		NUP="2x2"
		OPTARG="quarto"
	elif [ "$1" = "2o" ] || [ "$1" = "folio" ]
	then
		PAGES_PER_SIG=4
		NUP="2x1"
		OPTARG="folio"
	elif [ "$1" = "8vo" ] || [ "$1" = "octavo" ]
	then
		PAGES_PER_SIG=16
		NUP="4x2"
		OPTARG="octavo"
	elif [ "$1" = "6to" ] || [ "$1" = "sexto" ]
	then
		PAGES_PER_SIG=12
		NUP="2x3"
		OPTARG="sexto"
	elif [ "$1" = "12mo" ] || [ "$1" = "duodecimo" ]
	then
		PAGES_PER_SIG=24
		NUP="4x3"
		OPTARG="duodecimo"
	else
		echo "ERROR:  signature type \"$1\" not recognized." >&2
		exit $E_BAD_SIG_TYPE
	fi
}

# clean up filename argument
function filefunc
{
	err_message="ERROR:  bad characters in file name."
	if [ `echo "$1" | grep '\?'` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	elif [ `echo "$1" | grep '\*'` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	elif [ `echo "$1" | grep '"'` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	elif [ `echo "$1" | grep ';'` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	elif [ `echo "$1" | grep '[\\]'` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	elif [ `echo "$1" | grep ' '` ]
	then
		echo "$err_message" >&2
		exit $E_BAD_FILENAME
	fi
	OPTARG=`basename $1`
}

# now identify and parse the options
while getopts "Vhvfn:t:H:w:d:D:m:M:s:i:o:" Option
do
	case $Option in
		V	) versionfunc;;
		h	) helpfunc;;
		v	) VERBOSE=1;;
		f	) FRONT_FAVOR=1;;
		n	) SECT_TYPE=$OPTARG;;
		t	) typearg "$OPTARG"; SIG_TYPE=$OPTARG;;
		H	) unitarg "$OPTARG"; TGT_PAGE_HEIGHT=$OPTARG;;
		w	) unitarg "$OPTARG"; TGT_PAGE_WIDTH=$OPTARG;;
		d	) unitarg "$OPTARG"; HORIZ_DELTA=$OPTARG;;
		D	) unitarg "$OPTARG"; VERT_DELTA=$OPTARG;;
		m	) unitarg "$OPTARG"; HORIZ_OFFSET=$OPTARG;;
		M	) unitarg "$OPTARG"; VERT_OFFSET=$OPTARG;;
		s	) SCALE=$OPTARG;;
		i	) filefunc "$OPTARG"; FILE_NAME=$OPTARG;;
		o	) filefunc "$OPTARG"; OUTFILE_NAME=$OPTARG;;
		*	) echo "ERROR:  unknown flag \
			\"$Option\"." >&2; exit $E_BAD_OPT;;
	esac
done

# make random file name to use for input
NEW_FILE_NAME="tmp_`od -An -N4 -t uL /dev/urandom | tr -d '\ '`.pdf"
# if input file specified, use file; if not, read stdin
if [ "$FILE_NAME" ]
then
	cp "$FILE_NAME" "$NEW_FILE_NAME"
else
	FILE_NAME="book.pdf"
	cat /dev/stdin > "$NEW_FILE_NAME"
fi
# declare holder variable for pdftk
tmp_name="tmp_`od -An -N4 -t uL /dev/urandom | tr -d '\ '`.pdf"
# if output file specified, use that; if not, name it; if
# "-", use stdout
[ "$OUTFILE_NAME" ] || OUTFILE_NAME="sigs_$FILE_NAME"
if [ "$OUTFILE_NAME" = "stdout" ]
then
	VERBOSE=0
fi
# print our introduction message
if [ $VERBOSE -eq 1 ]
then
	echo "makebook.  Copyright (C) 2011, Donald P.  Goodman III."
	echo "This program comes with ABSOLUTELY NO WARRANTY."
	echo "This is free software, and you are welcome to "
	echo "redistribute it under certain conditions; see "
	echo "the GNU GPL v3 for details."
	echo "IMPOSING pdf pages onto \"$OUTFILE_NAME\"..."
fi

# get some information about our source document
NUM_PAGES=`pdfinfo "$NEW_FILE_NAME" | awk '/Pages:/ {print $2}'`;
SRC_PAGE_WIDTH=`pdfinfo "$NEW_FILE_NAME" | awk '/Page\ size:/ {print $3}'`;
SRC_PAGE_HEIGHT=`pdfinfo "$NEW_FILE_NAME" | awk '/Page\ size:/ {print $5}'`;
# find the number of pages we'll have per signature
PAGES_PER_SIG=$(($PAGES_PER_SIG * $SECT_TYPE))
# determine if extra pages will be necessary
NUM_BLANKS=`expr $NUM_PAGES % $PAGES_PER_SIG`
if [ $NUM_BLANKS -ne 0 ]
then
	NUM_BLANKS=`expr $PAGES_PER_SIG - $NUM_BLANKS`
fi
tmp=`expr $NUM_PAGES + $NUM_BLANKS`
NUM_SIGS=`expr $tmp / $PAGES_PER_SIG`

# if extra pages are needed, generate blank page
if [ $NUM_BLANKS -gt 0 ] && [ ! -e "./blank.pdf" ]
then
	echo "\documentclass{article}
		\thispagestyle{empty}
		\usepackage[paperwidth=${SRC_PAGE_WIDTH}bp,paperheight="${SRC_PAGE_HEIGHT}bp"]{geometry}
		\begin{document}
		\quad
		\end{document}" > blank.tex
	if [ $VERBOSE -eq 1 ]
	then
		echo "CREATING blank page to fill sections..."
	fi
	pdflatex blank.tex >/dev/null
	rm blank.aux blank.log blank.tex
fi
# now insert blank pages as needed, preferring the back for
# odd numbers by default, front if stated
if [ $NUM_BLANKS -eq 1 ]
then
	if [ $VERBOSE -eq 1 ]
	then
		echo "INSERTING one blank page..."
	fi
	if [ $FRONT_FAVOR -eq 0 ]
	then
		pdftk A="$NEW_FILE_NAME" B=blank.pdf cat A1-end \
		B1 output "$tmp_name"
	else
		pdftk A="$NEW_FILE_NAME" B=blank.pdf cat B1 \
		A1-end output "$tmp_name"
	fi
	mv "$tmp_name" "$NEW_FILE_NAME"
else
	tmp=`expr $NUM_BLANKS / 2`
	START_BLANKS=${tmp/.*}
	END_BLANKS=`expr $NUM_BLANKS - $START_BLANKS`
	if [ `expr $START_BLANKS % 2` -ne 0 ]; then : else
		START_BLANKS=`expr $START_BLANKS - 1`
		END_BLANKS=`expr $END_BLANKS + 1 `
	fi
	if [ $FRONT_FAVOR -eq 1 ]
	then
		tmp=$START_BLANKS
		START_BLANKS=$END_BLANKS
		END_BLANKS=$tmp
		if [ `expr $START_BLANKS % 2` -ne 0 ]; then : else
			START_BLANKS=`expr $START_BLANKS - 1`
			END_BLANKS=`expr $END_BLANKS + 1 `
		fi
	fi
	if [ $VERBOSE -eq 1 ]
	then
		echo "INSERTING $START_BLANKS blank pages at start..."
		echo "INSERTING $END_BLANKS blank pages at end...";
	fi
	i=0
	while [ $i -lt $START_BLANKS ]
	do
		pdftk A="$NEW_FILE_NAME" B=blank.pdf cat B1 A1-end output "$tmp_name"
		mv "$tmp_name" "$NEW_FILE_NAME"
		i=`expr $i + 1`
	done
	i=0
	while [ $i -lt $END_BLANKS ]
	do
		pdftk A="$NEW_FILE_NAME" B=blank.pdf cat A1-end B1 output "$tmp_name"
		mv "$tmp_name" "$NEW_FILE_NAME"
		i=`expr $i + 1`
	done
fi
# begin the imposing, announcing if appropriate
tmp=`expr $NUM_PAGES + $NUM_BLANKS`
if [ $VERBOSE -eq 1 ]
then
	echo "IMPOSING $NUM_PAGES pages ($tmp with blanks) on 
	$(($NUM_SIGS * $SECT_TYPE)) signature(s) gathered in 
	sections of $SECT_TYPE signature(s) each...";
fi
# arrange the pages for impression on signatures
i=1
j=1
if [ $VERBOSE -eq 1 ]
then
	echo "REARRANGING pages...";
fi
while [ $j -le $NUM_SIGS ]
do
	if [ "$SIG_TYPE" = "quarto" ]
	then
		# determine size of target page
		if [ $TGT_PAGE_HEIGHT -eq 0 ]
		then
			TGT_PAGE_HEIGHT=$(($SRC_PAGE_HEIGHT * 2))
		fi
		if [ $TGT_PAGE_WIDTH -eq 0 ]
		then
			TGT_PAGE_WIDTH=$(($SRC_PAGE_WIDTH * 2))
		fi
		# do the rearranging
		k=$i; n=1; total=$(($SECT_TYPE * 8)); m=$total
		while [ $n -le $SECT_TYPE ]
		do
			pdftk "$NEW_FILE_NAME" cat `expr $k + $m - 1` $k \
				`expr $k + $m - 4`S `expr $k + 3`S \
				`expr $k + 1` `expr $k + $m - 2` `expr $k + 2`S \
				`expr $k + $m - 3`S output ${tmp_name%.pdf}_$n;
			k=`expr $k + 4`; n=`expr $n + 1`; m=`expr $m - 8`
		done
		n=1
		while [ `expr $n + 0` -le $SECT_TYPE ]
		do
			if [ ! -e "$tmp_name" ]
			then
				pdftk A=${tmp_name%.pdf}_$n cat A1-end \
				output "$tmp_name"
			else
				pdftk A=$tmp_name B=${tmp_name%.pdf}_`expr $n` \
					cat A1-end B1-end output ${tmp_name}_tmp
				mv ${tmp_name}_tmp "$tmp_name"
			fi
			n=`expr $n + 1`
		done
		if [ $VERBOSE -eq 1 ]
		then
			echo "REARRANGING section number $j..."
		fi
		j=`expr $j + 1`;
		i=`expr $i + $total`;
	elif [ "$SIG_TYPE" = "folio" ]
	then
		# determine size of target page
		if [ $TGT_PAGE_HEIGHT -eq 0 ]
		then
			TGT_PAGE_HEIGHT=$(($SRC_PAGE_HEIGHT * 1))
		fi
		if [ $TGT_PAGE_WIDTH -eq 0 ]
		then
			TGT_PAGE_WIDTH=$(($SRC_PAGE_WIDTH * 2))
		fi
		# do the rearranging
		k=$i; n=1; total=$(($SECT_TYPE * 4)); m=$total
		while [ $n -le $SECT_TYPE ]
		do
			pdftk "$NEW_FILE_NAME" cat `expr $k + $m - 1` \
				`expr $k` `expr $k + 1` `expr $k + $m - 2` \
				output ${tmp_name%.pdf}_$n;
			k=`expr $k + 2`; n=`expr $n + 1`; m=`expr $m - 4`
		done
		n=1
		while [ `expr $n + 0` -le $SECT_TYPE ]
		do
			if [ ! -e "$tmp_name" ]
			then
				pdftk A=${tmp_name%.pdf}_$n cat A1-end \
				output "$tmp_name"
			else
				pdftk A="$tmp_name" B=${tmp_name%.pdf}_`expr $n` \
					cat A1-end B1-end output ${tmp_name}_tmp
				mv ${tmp_name}_tmp "$tmp_name"
			fi
			n=`expr $n + 1`
		done
		if [ $VERBOSE -eq 1 ]
		then
			echo "REARRANGING section number $j..."
		fi
		j=`expr $j + 1`;
		i=`expr $i + $total`;
	elif [ "$SIG_TYPE" = "octavo" ]
	then
		# determine target page dimensions
		if [ $TGT_PAGE_HEIGHT -eq 0 ]
		then
			TGT_PAGE_HEIGHT=$(($SRC_PAGE_HEIGHT * 2))
		fi
		if [ $TGT_PAGE_WIDTH -eq 0 ]
		then
			TGT_PAGE_WIDTH=$(($SRC_PAGE_WIDTH * 4))
		fi
		# do the rearranging
		k=$i; n=1; total=$(($SECT_TYPE * 16)); m=$total
		while [ $n -le $SECT_TYPE ]
		do
			pdftk "$NEW_FILE_NAME" cat `expr $k + 3` \
				`expr $k + $m - 4` `expr $k + $m - 1` $k \
				`expr $k + 4`S `expr $k + $m - 5`S \
				`expr $k + $m  - 8`S `expr $k + 7`S \
				`expr $k + 1` `expr $k + $m - 2` `expr $k + $m - 3` \
				`expr $k + 2` `expr $k + 6`S `expr $k + $m - 7`S \
				`expr $k + $m - 6`S `expr $k + 5`S \
				output ${tmp_name%.pdf}_$n;
			k=`expr $k + 8`; n=`expr $n + 1`; m=`expr $m - 16`
		done
		n=1
		while [ `expr $n + 0` -le $SECT_TYPE ]
		do
			if [ ! -e "$tmp_name" ]
			then
				pdftk A=${tmp_name%.pdf}_$n cat A1-end \
				output "$tmp_name"
			else
				pdftk A="$tmp_name" B=${tmp_name%.pdf}_`expr $n` \
					cat A1-end B1-end output ${tmp_name}_tmp
				mv ${tmp_name}_tmp "$tmp_name"
			fi
			n=`expr $n + 1`
		done
		if [ $VERBOSE -eq 1 ]
		then
			echo "REARRANGING section number $j..."
		fi
		j=`expr $j + 1`;
		i=`expr $i + $total`;
	elif [ "$SIG_TYPE" = "sexto" ]
	then
		# determine target page dimensions
		if [ $TGT_PAGE_HEIGHT -eq 0 ]
		then
			TGT_PAGE_HEIGHT=$(($SRC_PAGE_HEIGHT * 3))
		fi
		if [ $TGT_PAGE_WIDTH -eq 0 ]
		then
			TGT_PAGE_WIDTH=$(($SRC_PAGE_WIDTH * 2))
		fi
		# do the rearranging
		k=$i; n=1; total=$(($SECT_TYPE * 12)); m=$total
		while [ $n -le $SECT_TYPE ]
		do
			pdftk "$NEW_FILE_NAME" cat `expr $k + 5` \
				`expr $k + 6` `expr $k + $m - 1` $k \
				`expr $k + $m - 1 - 3`S `expr $k + 3`S \
				`expr $k + 7` `expr $k + 4` \
				`expr $k + 1` `expr $k + $m - 1 - 1` \
				`expr $k + 2`S `expr $k + $m - 1 - 2`S \
				output ${tmp_name%.pdf}_$n;
			k=`expr $k + 6`; n=`expr $n + 1`; m=`expr $m - 12`
		done
		n=1
		while [ `expr $n + 0` -le $SECT_TYPE ]
		do
			if [ ! -e "$tmp_name" ]
			then
				pdftk A=${tmp_name%.pdf}_$n cat A1-end \
				output "$tmp_name"
			else
				pdftk A=$tmp_name B=${tmp_name%.pdf}_`expr $n` \
					cat A1-end B1-end output ${tmp_name}_tmp
				mv ${tmp_name}_tmp "$tmp_name"
			fi
			n=`expr $n + 1`
		done
		if [ $VERBOSE -eq 1 ]
		then
			echo "REARRANGING section number $j..."
		fi
		j=`expr $j + 1`;
		i=`expr $i + $total`;
	elif [ "$SIG_TYPE" = "duodecimo" ]
	then
		# determine target page dimensions
		if [ $TGT_PAGE_HEIGHT -eq 0 ]
		then
			TGT_PAGE_HEIGHT=$(($SRC_PAGE_HEIGHT * 3))
		fi
		if [ $TGT_PAGE_WIDTH -eq 0 ]
		then
			TGT_PAGE_WIDTH=$(($SRC_PAGE_WIDTH * 4))
		fi
		# do the rearranging
		k=$i; n=1; total=$(($SECT_TYPE * 24)); m=$total
		while [ $n -le $SECT_TYPE ]
		do
			pdftk "$NEW_FILE_NAME" cat `expr $k + 8` \
				`expr $k + $m - 1 - 8` `expr $k + 12` \
				`expr $k + 11` `expr $k + 4` \
				`expr $k + $m - 1 - 3` `expr $k + $m - 1` \
				$k `expr $k + 4`S `expr $k + $m - 1 - 4`S \
				`expr $k + $m - 1 - 7`S `expr $k + 7`S \
				`expr $k + 10` `expr $k + 13` `expr $k + 14` \
				`expr $k + 9` `expr $k + 1` `expr $k + $m - 1 - 1` \
				`expr $k + $m - 1 - 2` `expr $k + 2` \
				`expr $k + 6`S `expr $k + $m - 1 - 6`S \
				`expr $k + $m - 1 - 5`S `expr $k + 5`S \
				output ${tmp_name%.pdf}_$n;
			k=`expr $k + 12`; n=`expr $n + 1`; m=`expr $m - 24`
		done
		n=1
		while [ `expr $n + 0` -le $SECT_TYPE ]
		do
			if [ ! -e "$tmp_name" ]
			then
				pdftk A=${tmp_name%.pdf}_$n cat A1-end \
				output $tmp_name
			else
				pdftk A="$tmp_name" B=${tmp_name%.pdf}_`expr $n` \
					cat A1-end B1-end output ${tmp_name}_tmp
				mv ${tmp_name}_tmp "$tmp_name"
			fi
			n=`expr $n + 1`
		done
		if [ $VERBOSE -eq 1 ]
		then
			echo "REARRANGING section number $j..."
		fi
		j=`expr $j + 1`;
		i=`expr $i + $total`;
	fi
done
mv "$tmp_name" "$NEW_FILE_NAME"
rm ${tmp_name%.pdf}*
echo "\documentclass{article}
	\usepackage{pdfpages}
	\usepackage[paperwidth=${TGT_PAGE_WIDTH}bp,paperheight=${TGT_PAGE_HEIGHT}bp]{geometry}
	\pagestyle{empty}
	\begin{document}
	\includepdf[nup=$NUP,pages=-,turn=false,columnstrict,
	noautoscale,delta=${HORIZ_DELTA}bp ${VERT_DELTA}bp,
	offset=${HORIZ_OFFSET}bp ${VERT_OFFSET}bp,scale=${SCALE}]
	{./"$NEW_FILE_NAME"}\end{document}" > ${OUTFILE_NAME%.pdf}.tex
if [ $VERBOSE -eq 1 ]
then
	echo "IMPOSING sections..."
fi
pdflatex ${OUTFILE_NAME%.pdf}.tex >/dev/null
if [ $VERBOSE -eq 1 ]
then
	echo "CLEANING up..."
fi
rm ${OUTFILE_NAME%.pdf}.tex ${OUTFILE_NAME%.pdf}.aux \
	${OUTFILE_NAME%.pdf}.log "$NEW_FILE_NAME"
if [ $VERBOSE -eq 1 ]
then
	echo "`expr $NUM_PAGES + $NUM_BLANKS` pages imposed in
	$(($NUM_SIGS * $SECT_TYPE)) $SIG_TYPE signatures gathered 
	in sections of $SECT_TYPE signature(s) each and output to 
	${OUTFILE_NAME%.pdf}.pdf."
fi
if [ "$OUTFILE_NAME" = "stdout" ]
then
	cat ${OUTFILE_NAME}.pdf
	rm ${OUTFILE_NAME}.pdf
fi
exit 0
